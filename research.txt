Existing UNIX friendly general database interface libraries for the
plumbing/physical layer:

ODBC: Legacy and thus $$

--------

Common Lisp SQL (CLSQL) appears to have its own, also LGPL, last updated 2016
http://git.kpe.io/?p=clsql.git;a=tree;f=db-odbc;h=d349c08686f215c56c1ae7f0eeb492215a3d55b9;hb=HEAD

--------

OpenDBX looks very dead.

--------

GNOME DB/libgda is hopelessly complicated and buggy, also LGPL, and typed

--------

http://libdbi.sourceforge.net/
https://sourceforge.net/projects/libdbi/
http://libdbi-drivers.sourceforge.net/
https://sourceforge.net/projects/libdbi-drivers/

libdbi no longer under development but very minimally supported, C,
LGPL, and looks typed.  Claims its design is object oriented.  Claims
it's used by Bacula, but half a decade later that's not true.

Typing that you can apply to returned results is cramped, text and
binary strings, imprecisely sized integers [BAD SMELL], floats and
doubles, and "date/time".  Would require serialization.  But looks
like you can apply dynamic typing on the fly.

From the website, would be ~2013-4:

The drivers officially supported by libdbi are:

MySQL
PostgreSQL [ A PostgreSQL building patch was done March 2019. ]
SQLite3

The following drivers are in various stages of completion and are supposed to be included into the next release(tm):

DB2
Firebird/Interbase
FreeTDS (provides access to MS SQL Server and Sybase)
Ingres
mSQL
Oracle

--------

C++: CppDB, SOCI

GPL only: libzdb, sells itself on connection pooling.

Scheme libraries:

guile dbi GPL only.

Gerbil is object oriented like or worse than Gauche: https://github.com/vyzo/gerbil/tree/master/src/std/db

sqlid.plt dead before bzlib/dbi below was developed, not part of Racket library set, LGPL.

PLT bzlib/dbi based on Perl DBI dead, LGPL, was once popular but no longer part of Racket library set, retrieved.

